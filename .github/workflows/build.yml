name: build

on:
  workflow_dispatch:
  push:
    branches:
      - master
      - ci
      - 'release/**'
    paths-ignore:
      - 'DOCS/**'
      - 'TOOLS/lua/**'
      - '.editorconfig'
      - '.github/ISSUE_TEMPLATE/**'
      - '.github/PULL_REQUEST_TEMPLATE'
      - '.gitignore'
      - 'Copyright'
      - 'README.md'
      - 'RELEASE_NOTES'
  pull_request:
    branches: [master]
    paths-ignore:
      - 'DOCS/**'
      - 'TOOLS/lua/**'
      - '.editorconfig'
      - '.github/ISSUE_TEMPLATE/**'
      - '.github/PULL_REQUEST_TEMPLATE'
      - '.gitignore'
      - 'Copyright'
      - 'README.md'
      - 'RELEASE_NOTES'

jobs:
  linux:
    runs-on: ubuntu-latest
    container:
      image: "registry.opensuse.org/home/mia/images/images/mpv-ci:stable-deps"
      env:
        CC: "${{ matrix.config.cc }}"
        CXX: "${{ matrix.config.cxx }}"
        CC_LD: "${{ matrix.config.ld }}"
        CXX_LD: "${{ matrix.config.ld }}"
    strategy:
      matrix:
        config:
          - cc: "gcc"
            cxx: "g++"
            args: "-Db_ndebug=true"
          - cc: "clang"
            cxx: "clang++"
            ld: "lld"
            args: "-Db_lto=true -Db_lto_mode=thin"
    steps:
      - uses: actions/checkout@v4

      - name: Build with meson
        id: build
        run: |
          ./ci/build-tumbleweed.sh ${{ matrix.config.args }}

      - name: Print meson log
        if: ${{ failure() && steps.build.outcome == 'failure' }}
        run: |
          cat ./build/meson-logs/meson-log.txt

      - name: Run meson tests
        id: tests
        run: |
          export LSAN_OPTIONS="suppressions=${GITHUB_WORKSPACE}/.lsan_suppressions"
          meson test -C build

      - name: Print meson test log
        if: ${{ failure() && steps.tests.outcome == 'failure' }}
        run: |
          cat ./build/meson-logs/testlog.txt

  linux-fuzz:
    runs-on: ubuntu-latest
    container:
      image: "registry.opensuse.org/home/mia/images/images/mpv-ci:stable-deps"
      env:
        CC: "clang"
        CXX: "clang++"
    steps:
      - uses: actions/checkout@v4

      - name: Build with meson
        id: build
        run: |
          meson setup build \
            --werror        \
            -Dc_args="-Wno-error=deprecated -Wno-error=deprecated-declarations" \
            -Dfuzzers=true -Dlibmpv=true -Dcplayer=false
          meson compile -C build fuzzers

      - name: Print meson log
        if: ${{ failure() && steps.build.outcome == 'failure' }}
        run: |
          cat ./build/meson-logs/meson-log.txt

  linux-ffmpeg-6-1:
    runs-on: ubuntu-latest
    container:
      # We want to test ffmpeg 6.1.1 which alpine 3.19 has exactly.
      # Furthermore, this is a very minimal build of mpv without commonly
      # used features to test build compatibility. Musl is a nice bonus as well
      image: alpine:3.19
    steps:
      - uses: actions/checkout@v4
      - name: Install dependencies
        run: |
          apk update
          apk add \
              binutils \
              ffmpeg-dev \
              gcc \
              git \
              g++ \
              libass-dev \
              lua5.2-dev \
              pulseaudio-dev \
              libx11-dev \
              libxfixes-dev \
              libxkbcommon-dev \
              libxrandr-dev \
              libxpresent-dev \
              libxscrnsaver-dev \
              meson \
              musl-dev \
              samurai

      - name: Build with meson
        id: build
        run: |
          ./ci/build-linux-old.sh

      - name: Print meson log
        if: ${{ failure() && steps.build.outcome == 'failure' }}
        run: |
          cat ./build/meson-logs/meson-log.txt

      - name: Run meson tests
        id: tests
        run: |
          meson test -C build

      - name: Print meson test log
        if: ${{ failure() && steps.tests.outcome == 'failure' }}
        run: |
          cat ./build/meson-logs/testlog.txt
